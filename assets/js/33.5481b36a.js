(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{318:function(t,n,e){"use strict";e.r(n);var a=e(10),s=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"configuring-with-built-in-goners-support"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuring-with-built-in-goners-support"}},[t._v("#")]),t._v(" Configuring with Built-in Goners Support")]),t._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#example"}},[t._v("Example")]),n("ul",[n("li",[n("a",{attrs:{href:"#_1-create-a-mod"}},[t._v("1. Create a mod")])]),n("li",[n("a",{attrs:{href:"#_2-add-a-configuration-file"}},[t._v("2. Add a configuration file")])]),n("li",[n("a",{attrs:{href:"#_3-add-code"}},[t._v("3. Add code")])]),n("li",[n("a",{attrs:{href:"#_4-run"}},[t._v("4. Run")])])])]),n("li",[n("a",{attrs:{href:"#configuration-injection"}},[t._v("Configuration Injection")]),n("ul",[n("li",[n("a",{attrs:{href:"#tag-format-used"}},[t._v("Tag Format Used")])]),n("li",[n("a",{attrs:{href:"#supported-data-types-for-injection"}},[t._v("Supported Data Types for Injection")])]),n("li",[n("a",{attrs:{href:"#configuration-files"}},[t._v("Configuration Files")])])])])])]),n("p"),t._v(" "),n("p",[t._v("Gone provides a method to read configuration files using the built-in Goners. Currently, the configuration file format is only supported in "),n("code",[t._v(".properties")]),t._v(".")]),t._v(" "),n("h2",{attrs:{id:"example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),n("blockquote",[n("p",[t._v("You can find the source code of the example "),n("a",{attrs:{href:"https://github.com/gone-io/gone/tree/main/example/use-config",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),n("OutboundLink")],1),t._v(".")])]),t._v(" "),n("h3",{attrs:{id:"_1-create-a-mod"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-create-a-mod"}},[t._v("#")]),t._v(" 1. Create a mod")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("go mod init use-config\n")])])]),n("h3",{attrs:{id:"_2-add-a-configuration-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-add-a-configuration-file"}},[t._v("#")]),t._v(" 2. Add a configuration file")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" config\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" config/default.properties\n")])])]),n("p",[t._v("The content of the "),n("code",[t._v("config/default.properties")]),t._v(" file is as follows:")]),t._v(" "),n("div",{staticClass:"language-properties extra-class"},[n("pre",{pre:!0,attrs:{class:"language-properties"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("my.conf.int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("my.conf.int8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("130")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("my.conf.float64")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10.222")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("my.conf.string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("config test")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("my.conf.bool")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("my.conf.duration")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10h")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("my.conf.sub.x")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("100x")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("my.conf.sub.y")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("200y")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("my.conf.subs[0].x")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("0000x")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("my.conf.subs[0].y")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("0000y")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("my.conf.subs[1].x")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("1111x")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("my.conf.subs[1].y")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("1111y")]),t._v("\n")])])]),n("h3",{attrs:{id:"_3-add-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-add-code"}},[t._v("#")]),t._v(" 3. Add code")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" main.go\n")])])]),n("p",[t._v("The content of the "),n("code",[t._v("main.go")]),t._v(" file is as follows:")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github.com/gone-io/gone"')]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github.com/gone-io/gone/goner/config"')]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"time"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" SubConf "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tX "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`properties:"x"`')]),t._v("\n\tY "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`properties:"y"`')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" UseConfig "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tgone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Flag\n\n\t"),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("      "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("           "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"config,my.conf.int"`')]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int8")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int8")]),t._v("          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"config,my.conf.int8"`')]),t._v("\n\tprintInt "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"config,my.conf.int8"`')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pointer to int")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v("       "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"config,my.conf.float64"`')]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"config,my.conf.string"`')]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"config,my.conf.bool"`')]),t._v("\n\tduration time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Duration "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"config,my.conf.duration"`')]),t._v("\n\tdefaultV "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"config,my.conf.default,default=ok"`')]),t._v("\n\n\tsub "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("SubConf "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"config,my.conf.sub"`')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pointer to struct")]),t._v("\n\n\tsubs "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("SubConf "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"config,my.conf.subs"`')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// array")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("UseConfig"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("AfterRevive")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" gone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AfterReviveError "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int=%d\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int8=%d\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"printInt=%d\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("g"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("printInt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"float64=%f\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string=%s\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bool=%t\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"duration=%v\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("duration"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"defaultV=%s\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("defaultV"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sub.x=%v\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"subs=%v\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("subs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tgone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cemetery gone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Cemetery"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Priest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cemetery"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tcemetery"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bury")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("UseConfig"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_4-run"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-run"}},[t._v("#")]),t._v(" 4. Run")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("go mod tidy\ngo run main.go\n")])])]),n("p",[t._v("The output will be as follows:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int=10\nint8=-126\nprintInt=130\nfloat64=10.222000\nstring=config test\nbool=true\nduration=10h0m0s\ndefaultV=ok\nsub.x=&{100x 200y}\nsubs=[{0000x 0000y} {1111x 1111y}]\n")])])]),n("h2",{attrs:{id:"configuration-injection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuration-injection"}},[t._v("#")]),t._v(" Configuration Injection")]),t._v(" "),n("p",[t._v('As seen from the example, configuration items can also be "dependency injected" into Goners.')]),t._v(" "),n("h3",{attrs:{id:"tag-format-used"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tag-format-used"}},[t._v("#")]),t._v(" Tag Format Used")]),t._v(" "),n("p",[t._v("The tag format for configuration injection is as follows:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('gone:"config,${key},default=${defaultValue}"\n')])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Explanation:")]),t._v(" "),n("ol",[n("li",[t._v("The tag name remains "),n("code",[t._v("gone")]),t._v(".")]),t._v(" "),n("li",[n("code",[t._v("config")]),t._v(" is a fixed value, indicating that the property is a configuration.")]),t._v(" "),n("li",[n("code",[t._v("${key}")]),t._v(" represents the key in the configuration file.")]),t._v(" "),n("li",[n("code",[t._v("default=${defaultValue}")]),t._v(" is used to specify a default value, which can be omitted; "),n("code",[t._v("${defaultValue}")]),t._v(" is the default value. If no default value is specified and the corresponding key is missing in the configuration file, an error will be raised.")])])]),t._v(" "),n("h3",{attrs:{id:"supported-data-types-for-injection"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#supported-data-types-for-injection"}},[t._v("#")]),t._v(" Supported Data Types for Injection")]),t._v(" "),n("blockquote",[n("p",[t._v("In the "),n("a",{attrs:{href:"https://goner.fun/guide/core-concept.html#goner-%E9%80%9D%E8%80%85",target:"_blank",rel:"noopener noreferrer"}},[t._v("Core Concepts - Goners"),n("OutboundLink")],1),t._v(", we mentioned that Goners can be injected into properties of other structures. Here, configuration, as a special case, can also be injected into properties of other structures. Its implementation is through "),n("a",{attrs:{href:"https://goner.fun/guide/core-concept.html#%F0%9F%A7%9B%F0%9F%8F%BB%E2%80%8D%E2%99%80%EF%B8%8Fvampire",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vampire"),n("OutboundLink")],1),t._v(", if interested, you can refer to "),n("a",{attrs:{href:"https://github.com/gone-io/gone/tree/v0.1.5/goner/config",target:"_blank",rel:"noopener noreferrer"}},[t._v("this part of the source code"),n("OutboundLink")],1),t._v(".")])]),t._v(" "),n("p",[t._v("The supported types for properties are listed below:")]),t._v(" "),n("ol",[n("li",[t._v("Basic types\n"),n("ul",[n("li",[t._v("Boolean: bool")]),t._v(" "),n("li",[t._v("Integer types: int, int64, int32, int16, int8")]),t._v(" "),n("li",[t._v("Unsigned integer types: uint, uint64, uint32, uint16, uint8")]),t._v(" "),n("li",[t._v("Floating-point types: float64, float32")]),t._v(" "),n("li",[t._v("String type: string")])])])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("For integer types and unsigned integer types, be cautious of the range they represent. If the number is too large, overflow may occur; for example, "),n("code",[t._v("int8")]),t._v(" represents the range "),n("code",[t._v("-128")]),t._v(" to "),n("code",[t._v("127")]),t._v(", so if a value larger than 127 is assigned, overflow will occur (assigning 128 will result in -128).")])]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("time.Duration\nFor convenient time parsing, "),n("code",[t._v("time.Duration")]),t._v(" type is supported in the configuration, and the following units can be used:\n"),n("ul",[n("li",[t._v("ns: nanoseconds")]),t._v(" "),n("li",[t._v("us: microseconds")]),t._v(" "),n("li",[t._v("ms: milliseconds")]),t._v(" "),n("li",[t._v("s: seconds")]),t._v(" "),n("li",[t._v("m: minutes")]),t._v(" "),n("li",[t._v("h: hours")])])])]),t._v(" "),n("p",[t._v("In the example, "),n("code",[t._v("my.conf.duration=10h")]),t._v(" represents 10 hours; "),n("code",[t._v("1h10m10s")]),t._v(" represents 1 hour, 10 minutes, and 10 seconds.")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("Implementation uses "),n("code",[t._v("time.ParseDuration")]),t._v(", so you can refer to: "),n("a",{attrs:{href:"https://pkg.go.dev/time#ParseDuration",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://pkg.go.dev/time#ParseDuration"),n("OutboundLink")],1),t._v(".")])]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[t._v("Struct types\nIn the example, the type of the configuration struct is provided. It needs to adhere to the following rules:\n"),n("ul",[n("li",[t._v("The properties in the struct to be configured must be public, i.e., starting with a capital letter.")]),t._v(" "),n("li",[t._v("Use the "),n("code",[t._v("properties")]),t._v(" tag to specify the name of the property.")]),t._v(" "),n("li",[t._v("Supports nesting.")])])])]),t._v(" "),n("p",[t._v("Explanation: In the example, the property "),n("code",[t._v("sub")]),t._v(" of "),n("code",[t._v("UseConfig")]),t._v(" reads the configuration key "),n("code",[t._v("my.conf.sub")]),t._v("; the type of "),n("code",[t._v("sub")]),t._v(" is "),n("code",[t._v("SubConf")]),t._v(", and the property "),n("code",[t._v("X")]),t._v(" is marked with the configuration name "),n("code",[t._v('properties:"x"')]),t._v(", so the value of "),n("code",[t._v("sub.X")]),t._v(" will be read from the configuration item "),n("code",[t._v("my.conf.sub.x")]),t._v(".")]),t._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[t._v("Array types\nConfiguration injection supports the Slice type, and currently, the elements of the Slice support structs and pointers to structs. The key format for configuration is as follows:")])]),t._v(" "),n("div",{staticClass:"language-ini extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ini"}},[n("code",[t._v("${injectConfigkey}[${index}].${structAttributeName}\n")])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Explanation")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("${injectConfigkey}")]),t._v(" is the key of the item to be injected.")]),t._v(" "),n("li",[n("code",[t._v("${index}")]),t._v(" is the array index.")]),t._v(" "),n("li",[n("code",[t._v("${structAttributeName}")]),t._v(" is the value annotated on the property of the injected struct with the "),n("code",[t._v("properties")]),t._v(" tag.")])])]),t._v(" "),n("ol",{attrs:{start:"5"}},[n("li",[t._v("Pointer types\nSupports pointer types for injected properties.")])]),t._v(" "),n("h3",{attrs:{id:"configuration-files"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuration-files"}},[t._v("#")]),t._v(" Configuration Files")]),t._v(" "),n("h4",{attrs:{id:"configuration-file-directory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuration-file-directory"}},[t._v("#")]),t._v(" Configuration File Directory")]),t._v(" "),n("p",[t._v("The directory where configuration files are stored is determined by three parts:")]),t._v(" "),n("ol",[n("li",[t._v("The executable file and the current working directory of the program.")]),t._v(" "),n("li",[t._v("Relative configuration directory\nThe relative configuration directory defaults to "),n("code",[t._v("config")]),t._v(", and can be changed by passing the "),n("code",[t._v("--conf $configDir")]),t._v(" parameter during startup.")])]),t._v(" "),n("p",[t._v("For example, if the compiled gone program is saved as "),n("code",[t._v("/app/gone-app")]),t._v(", and we run it from the "),n("code",[t._v("/home/degfy")]),t._v(" directory:")]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /home/degfy/\n/app/gone-app\n")])])]),n("p",[t._v("And if the relative configuration directory is not modified by passing parameters, the configuration directory for the program would be:")]),t._v(" "),n("ul",[n("li",[t._v("/app/config")]),t._v(" "),n("li",[t._v("/home/degfy/config")])]),t._v(" "),n("h4",{attrs:{id:"default-configuration-file-path"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#default-configuration-file-path"}},[t._v("#")]),t._v(" Default Configuration File Path")]),t._v(" "),n("p",[t._v("Continuing from the previous example, the paths for configuration files would be:")]),t._v(" "),n("ul",[n("li",[t._v("/app/config/default.properties")]),t._v(" "),n("li",[t._v("/home/degfy/config/default.properties\nThese configuration files contain default configurations that do not change with the environment.")])]),t._v(" "),n("h4",{attrs:{id:"environment-specific-configuration-file-paths"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#environment-specific-configuration-file-paths"}},[t._v("#")]),t._v(" Environment-specific Configuration File Paths")]),t._v(" "),n("p",[t._v("During development, we typically use environment-specific configurations, such as:")]),t._v(" "),n("ul",[n("li",[t._v("local: Local development environment")]),t._v(" "),n("li",[t._v("dev: Development environment online")]),t._v(" "),n("li",[t._v("test: Testing environment online")]),t._v(" "),n("li",[t._v("prod: Production environment")])]),t._v(" "),n("p",[t._v("We can specify the current environment by setting the "),n("code",[t._v("ENV")]),t._v(" environment variable or passing the "),n("code",[t._v("--env $env")]),t._v(" parameter during startup. If neither is set, the default environment is "),n("code",[t._v("local")]),t._v(".\nContinuing from the previous example, the configuration files related to the environment would be:")]),t._v(" "),n("ul",[n("li",[t._v("/app/config/local.properties")]),t._v(" "),n("li",[t._v("/home/degfy/config/local.properties")])]),t._v(" "),n("h4",{attrs:{id:"configuration-loading-order"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuration-loading-order"}},[t._v("#")]),t._v(" Configuration Loading Order")]),t._v(" "),n("p",[t._v("As mentioned earlier, there are four configuration files when the program is started, and they are loaded in the following order:")]),t._v(" "),n("ol",[n("li",[t._v("/app/config/default.properties")]),t._v(" "),n("li",[t._v("/app/config/local.properties")]),t._v(" "),n("li",[t._v("/home/degfy/config/default.properties")]),t._v(" "),n("li",[t._v("/home/degfy/config/local.properties")])]),t._v(" "),n("p",[t._v("If the same configuration item exists in multiple files, the value from the file loaded later will override the value from the file loaded earlier. That is, environment-specific configurations override default configurations, and configurations from the current running directory override those from the program directory.")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Best Practices")]),t._v(" "),n("ol",[n("li",[t._v("Put all configurations in the default configuration file and override them in environment-specific configuration files as needed.")]),t._v(" "),n("li",[t._v('Design configurations with minimalism in mind and consider using a "convention over configuration" approach, where default values are provided whenever possible.')]),t._v(" "),n("li",[t._v('To make the code "ready out of the box," it\'s recommended to set up a complete configuration in '),n("code",[t._v("local.properties")]),t._v(" so that the program can run without any additional configuration, facilitating smooth startup for other team members who clone the codebase.")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);