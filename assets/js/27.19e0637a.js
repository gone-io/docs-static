(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{302:function(t,n,s){t.exports=s.p+"assets/img/image.01b2ecda.png"},333:function(t,n,s){"use strict";s.r(n);var a=s(10),e=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"v1-x版本-正式发布"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#v1-x版本-正式发布"}},[t._v("#")]),t._v(" v1.x版本 正式发布")]),t._v(" "),n("h2",{attrs:{id:"优化和新特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优化和新特性"}},[t._v("#")]),t._v(" 优化和新特性")]),t._v(" "),n("h3",{attrs:{id:"gone-核心功能增强"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gone-核心功能增强"}},[t._v("#")]),t._v(" gone 核心功能增强")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("重构了函数参数依赖注入\n在"),n("strong",[t._v("Cemetery")]),t._v("上提供了"),n("code",[t._v("InjectFuncParameters")]),t._v("方法，用于完成函数参数的依赖注入。")]),t._v(" "),n("p",[t._v("该方法的定义如下：")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("InjectFuncParameters")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tfn any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tinjectBefore "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pt reflect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tinjectAfter "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pt reflect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("reflect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("ul",[n("li",[t._v("入参说明：\n"),n("ul",[n("li",[t._v("fn，需要被注入的函数；函数允许拥有多个入参，入数可以是Gone框架中注册的接口或者结构体指针，也可以为被"),n("code",[t._v("gone")]),t._v("标记了属性的结构体，一般使用匿名结构体；")]),t._v(" "),n("li",[t._v("injectBefore，hook函数，在对第i个参数构造前调用，如果"),n("code",[t._v("injectBefore(x, i)")]),t._v("返回值非nil，InjectFuncParameters将不再构造fn函数的第"),n("code",[t._v("i")]),t._v("个参数，而是将该值的"),n("code",[t._v("reflect.Value")]),t._v("直接作为args数组的第i个值；")]),t._v(" "),n("li",[t._v("injectAfter，hook函数，在对第i个参数成功构造后调用；")])])]),t._v(" "),n("li",[t._v("出参说明\n"),n("ul",[n("li",[t._v("args，fn参数的"),n("code",[t._v("reflect.Value")]),t._v("数组")]),t._v(" "),n("li",[t._v("err，函数构造返回的错误")])])]),t._v(" "),n("li",[t._v("功能说明：\n根据fn函数的定义和Gone框架中注册的Goners，自动构造fn的参数数组args。然后可以使用"),n("code",[t._v("func (v Value) Call(in []Value) []Value")]),t._v("对函数进行调用。")])])]),t._v(" "),n("li",[n("p",[t._v("引入了"),n("strong",[t._v("gone.GonerOption")]),t._v("接口，用于给"),n("code",[t._v("Bury")]),t._v("提供选项。")]),t._v(" "),n("ul",[n("li",[t._v("gone.GonerId，在Bury时给Goner提供GonerId")]),t._v(" "),n("li",[t._v("gone.Order，在Bury时给Goner提供一个序号；可以用于明确定义Goners的加载顺序和hook函数的执行顺序。")]),t._v(" "),n("li",[t._v("gone.IsDefault，在Bury时给Goner提供默认的接口类型，后续我们将另外些一篇博客介绍该特性。")])])]),t._v(" "),n("li",[n("p",[t._v("调整了"),n("strong",[t._v("Cemetery")]),t._v("上"),n("code",[t._v("Bury*")]),t._v("方法支持gone.GonerOption接口，包括：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("Bury(Goner, ...GonerOption) Cemetery")]),t._v("，")]),t._v(" "),n("li",[n("code",[t._v("BuryOnce(goner Goner, options ...GonerOption) Cemetery")])]),t._v(" "),n("li",[n("code",[t._v("ReplaceBury(goner Goner, options ...GonerOption) error")])])])]),t._v(" "),n("li",[n("p",[t._v("重构了"),n("strong",[t._v("gone.Preparer")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("Preparer.Run")]),t._v("和"),n("code",[t._v("Preparer.Serve")]),t._v("方法，支持传入函数作为参数在框架启动后执行，可以传0个或者多个，函数支持依赖注入；")]),t._v(" "),n("li",[n("code",[t._v("Preparer.BeforeStart")]),t._v(", "),n("code",[t._v("Preparer.AfterStart")]),t._v(", "),n("code",[t._v("Preparer.BeforeStop")]),t._v(", "),n("code",[t._v("Preparer.AfterStop")]),t._v(" 注册的hook函数，支持依赖注入；")]),t._v(" "),n("li",[t._v("添加"),n("code",[t._v("Preparer.Test")]),t._v("方法，用于编写测试代码。")])])]),t._v(" "),n("li",[n("p",[t._v("基于 "),n("strong",[t._v("gone.Preparer")]),t._v(" 重构了 TestKit的实现，可以使用下面三种方式之一编写测试代码：")]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("gone.Test")]),t._v(" 测试某种类型的Goner:")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("  gone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("line "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Line"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \tassert"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Equal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" line"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("A"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Priest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("gone.TestAt")]),t._v("，测试某个具名的Goner：")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("\tgone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("TestAt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pointNameA"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("point "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Point"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \tassert"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Equal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" point"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("X"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \tassert"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Equal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" point"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Priest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Priest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("gone.Prepare().Test")]),t._v("，Prepare上的Test方法，支持传入一个函数作为参数，函数的参数将会被自动注入。")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("  gone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  \t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Prepare")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Priest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  \t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  \t\tline "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Line"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注入gone框架中注册的类型")]),t._v("\n\n  \t\tin "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注入匿名结构体")]),t._v("\n  \t\t\tpoint "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Point "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"example-test-point-a"`')]),t._v("\n  \t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  \t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \t\tassert"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Equal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" line"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("A"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \t\tassert"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Equal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("point"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])])])]),t._v(" "),n("h3",{attrs:{id:"内置goners"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内置goners"}},[t._v("#")]),t._v(" 内置Goners")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("重构"),n("code",[t._v("goner/gin")]),t._v("的HTTP请求参数注入机制。")]),t._v(" "),n("ul",[n("li",[t._v("使用"),n("code",[t._v("Cemetery.InjectFuncParameters")]),t._v("方法，对处理请求时的依赖注入机制进行重构。")]),t._v(" "),n("li",[t._v("在v0.x的版本中，处理HTTP请求注入的方式时，每次请求时都会创建一个函数来处理注入；在v1.x的版本中，会在程序启动流程中一次性构建处理函数，每次处理HTTP请求时的性能损耗和gin的性能差异基本一致。")]),t._v(" "),n("li",[t._v("HTTP请求参数的依赖注入，由于使用InjectFuncParameters重构，得到了增强：可以支持多个入参，入参可以是Gone框架中注册的接口或者结构体指针，也可以为被"),n("code",[t._v("gone")]),t._v("标记了属性的结构体，一般使用匿名结构体。")])])]),t._v(" "),n("li",[n("p",[t._v("重构 "),n("code",[t._v("goner/config")]),t._v("，优化代码实现，将接口"),n("code",[t._v("Configure")]),t._v("从"),n("code",[t._v("goner/config")]),t._v("包中提到"),n("code",[t._v("gone")]),t._v("包中。")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("gone.Configure")]),t._v("接口用于从抽象的设备中读取配置项，支持实现使用其他方式读取配置，如从文件、数据库等。")]),t._v(" "),n("li",[t._v("从"),n("code",[t._v(".properties")]),t._v("文件从读取配置，作为默认的配置读取方式，依赖保留在"),n("code",[t._v("goner/config")]),t._v("包中。")])])]),t._v(" "),n("li",[n("p",[t._v("新增加"),n("code",[t._v("goner/viper")]),t._v("，实现了"),n("code",[t._v("gone.Configure")]),t._v("接口，支持从多种配置文件读取配置。")])]),t._v(" "),n("li",[n("p",[t._v("新增加"),n("code",[t._v("goner/zap")]),t._v("，集成了"),n("code",[t._v("go.uber.org/zap")]),t._v("，用于日志输出。")]),t._v(" "),n("ul",[n("li",[t._v("日志接口"),n("code",[t._v("Logger")]),t._v("从"),n("code",[t._v("logrus.Logger")]),t._v("包移到"),n("code",[t._v("gone")]),t._v("包中。")]),t._v(" "),n("li",[t._v("使用日志，只需要注入"),n("code",[t._v("gone.Logger")]),t._v("即可；无需关注底层使用的何种日志框架。")])])])]),t._v(" "),n("h3",{attrs:{id:"覆盖测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#覆盖测试"}},[t._v("#")]),t._v(" 覆盖测试")]),t._v(" "),n("p",[t._v("对gone的代码编写了大量的单元测试代码，覆盖率达到90%。")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://app.codecov.io/gh/gone-io/gone",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:s(302),alt:"test"}}),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"后续计划"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#后续计划"}},[t._v("#")]),t._v(" 后续计划")]),t._v(" "),n("ol",[n("li",[t._v("提供更多的开箱可用的Goners，接入更多的优秀的Web中间件。")]),t._v(" "),n("li",[t._v("编写一个完善的参考案例")])])])}),[],!1,null,null,null);n.default=e.exports}}]);