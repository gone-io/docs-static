(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{333:function(t,n,s){"use strict";s.r(n);var a=s(10),e=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"注册goner时-使用goner-isdefault-将goner设置为某个接口的默认实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注册goner时-使用goner-isdefault-将goner设置为某个接口的默认实现"}},[t._v("#")]),t._v(" 注册Goner时，使用"),n("code",[t._v("goner.IsDefault(...)")]),t._v("将Goner设置为某个接口的默认实现")]),t._v(" "),n("h2",{attrs:{id:"从内置组件goner-logrus的构造函数讲起"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#从内置组件goner-logrus的构造函数讲起"}},[t._v("#")]),t._v(" 从内置组件goner/logrus的构造函数讲起")]),t._v(" "),n("p",[t._v("查看goner/logrus的源代码，其构造函数的代码如下：")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewLogger")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Goner"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GonerId"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GonerOption"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tlog "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tLogger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" logrus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("StandardLogger")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tlog"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ResetLog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" log"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IdGoneLogger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsDefault")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("如果使用 "),n("code",[t._v("cemetery.Bury(NewLogger())")]),t._v("将Logger注册到框架，将会为"),n("code",[t._v("gone.Logger")]),t._v("接口添加一个默认实现。这是Gone v1.x加入的新特性，是为了解决按类型注入的“歧义性问题”。")]),t._v(" "),n("p",[t._v("在 Gone v0.x版本中，如果需要依赖"),n("code",[t._v("gone.Logger")]),t._v("接口，如果对匿名嵌入的属性进行注入只能使用具名注入：")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" ServiceX "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tgone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Flag\n\tgone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Logger "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"gone-logger"`')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("原因是，匿名嵌入"),n("code",[t._v("gone.Logger")]),t._v("的"),n("code",[t._v("ServiceX")]),t._v("等于实现了"),n("code",[t._v("gone.Logger")]),t._v("接口，如果再按类型匿名注入"),n("code",[t._v("gone.Logger")]),t._v("接口到"),n("code",[t._v("Logger")]),t._v("属性，可能会导致自己注入到自己的属性上。")]),t._v(" "),n("p",[t._v("在 Gone v1.x版本中，"),n("code",[t._v("NewLogger()")]),t._v("函数返回的"),n("code",[t._v("gone.GonerOption")]),t._v("参数中，添加了"),n("code",[t._v("IsDefault(new(gone.Logger))")]),t._v("，将"),n("code",[t._v("NewLogger()")]),t._v("函数返回的"),n("code",[t._v("gone.Logger")]),t._v("接口设置为默认实现。框架在依赖注入的装配过程中，会优先选择类型的默认实现。这样按类型注入，也能唯一指向一个实现，解决歧义性问题。")]),t._v(" "),n("h2",{attrs:{id:"带来的好处"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#带来的好处"}},[t._v("#")]),t._v(" 带来的好处")]),t._v(" "),n("p",[t._v("在 Gone v0.x版本中，注入组件一般都使用GonerId做具名注入；然而GonerId是不在IDE工具的提示范畴的，那么要注入内置组件必须记住组件的GonerId，增加了使用心智负担。在 Gone v1.x版本中，使用"),n("code",[t._v("IsDefault(...)")]),t._v("将Goner设置为某个接口的默认实现，可以解决这个问题。同时，框架的内置组件全部使用了"),n("code",[t._v("IsDefault(...)")]),t._v("，使用时可以放心的按类型注入:")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" ServiceX "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tgone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Flag\n\tgone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Logger     "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"*"`')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注入Logger")]),t._v("\n\tgone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("XormEngine "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"*"`')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注入xorm 引擎")]),t._v("\n\tredis"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Cache     "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"*"`')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注入redis缓存")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"注意gone-isdefault的参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意gone-isdefault的参数"}},[t._v("#")]),t._v(" 注意gone.IsDefault的参数")]),t._v(" "),n("p",[n("strong",[t._v("gone.IsDefault")]),t._v("是一个函数，返回的是一个"),n("strong",[t._v("gone.GonerOption")]),t._v("，函数的功能是获取接口的类型包装为"),n("code",[t._v("gone.GonerOption")]),t._v("；接口作为golang的一种类型定义，是不能作为参数的，只能通过接口的指针间接传递类型信息。")]),t._v(" "),n("h2",{attrs:{id:"注册goner时-也可以不使用构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注册goner时-也可以不使用构造函数"}},[t._v("#")]),t._v(" 注册Goner时，也可以不使用构造函数")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" myImplementation "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tgone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Flag\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对myImplementation实现gone.Logger接口")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Priest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cemetery gone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Cemetery"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tcemetery"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bury")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("myImplementation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" gone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsDefault")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Logger"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);