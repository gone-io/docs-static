(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{324:function(t,e,a){"use strict";a.r(e);var s=a(10),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"gone的核心概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gone的核心概念"}},[t._v("#")]),t._v(" Gone的核心概念")]),t._v(" "),e("p",[t._v("“我们编写的代码，终究只是死物，除非他在"),e("strong",[t._v("天国")]),t._v("被"),e("strong",[t._v("复活")]),t._v("，为此我们需要将他"),e("strong",[t._v("埋葬")]),t._v("在"),e("strong",[t._v("墓园")]),t._v("。”")]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#goner-逝者"}},[t._v("Goner（逝者）")]),e("ul",[e("li",[e("a",{attrs:{href:"#🔮prophet-先知"}},[t._v("🔮Prophet（先知）")])]),e("li",[e("a",{attrs:{href:"#😇angel-天使"}},[t._v("😇Angel（天使）")])]),e("li",[e("a",{attrs:{href:"#🧛🏻‍♀️vampire-吸血鬼"}},[t._v("🧛🏻‍♀️Vampire（吸血鬼）")])])])]),e("li",[e("a",{attrs:{href:"#cemetery-墓园"}},[t._v("Cemetery（墓园）")]),e("ul",[e("li",[e("a",{attrs:{href:"#bury-埋葬"}},[t._v("Bury（埋葬）")])]),e("li",[e("a",{attrs:{href:"#revive-复活"}},[t._v("revive（复活）")])])])]),e("li",[e("a",{attrs:{href:"#heaven-天国"}},[t._v("Heaven（天国）")])])])]),e("p"),t._v(" "),e("h2",{attrs:{id:"goner-逝者"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#goner-逝者"}},[t._v("#")]),t._v(" Goner（逝者）")]),t._v(" "),e("p",[t._v("在Gone框架中，最基本的定义和最核心的概念就是 Goner，"),e("strong",[t._v("Goner 是指的匿名嵌入了 "),e("code",[t._v("gone.Flag")]),t._v(" 的结构体")]),t._v("。举个例子：")]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Worker "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tgone"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Flag\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Goner是Gone框架中的组件，是实现依赖注入的关键：")]),t._v(" "),e("ol",[e("li",[t._v("Goner可以作为属性被注入到其他结构体")]),t._v(" "),e("li",[t._v("Goner的属性可以被其他类型注入")])]),t._v(" "),e("p",[t._v("为什么需要内嵌一个 "),e("code",[t._v("gone.Flag")]),t._v("？是因为我们希望限制依赖注入的范围，让依赖注入只发生在Goners之间，让Gone框架的组件实现有一个统一的模式。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("p",[t._v("下面是Goner和gone.Flag的源代码：")]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Flag "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Flag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("goneFlag")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Goner 逝者")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Goner "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("goneFlag")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Goner作为接口，要求实现它的“对象”拥有一个私有的方法"),e("code",[t._v("goneFlag()")]),t._v("；由于go语言可见性的限制，不能在"),e("code",[t._v("github.com/gone-io/gone")]),t._v("以外的包中实现其内部定义的私有方法；一个结构体要成为Goner，只能通过内嵌"),e("code",[t._v("gone.Flag")]),t._v("才能“继承”私有的方法"),e("code",[t._v("goneFlag()")]),t._v("。这段话可能有些不好理解，其实就是说Goner的实现只能通过内嵌gone.Flag来完成，不能通过实现"),e("code",[t._v("goneFlag()")]),t._v("方法来完成。")])]),t._v(" "),e("p",[t._v("在Gone框架中，还包含了三类特殊的Goner，定义如下：")]),t._v(" "),e("h3",{attrs:{id:"🔮prophet-先知"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#🔮prophet-先知"}},[t._v("#")]),t._v(" 🔮Prophet（先知）")]),t._v(" "),e("p",[t._v("一种特殊的 "),e("strong",[t._v("Goner")]),t._v("，在普通 "),e("strong",[t._v("Goner")]),t._v(" 上实现了 "),e("strong",[e("code",[t._v("AfterRevive() AfterReviveError")])]),t._v(" 方法就是 "),e("strong",[t._v("Prophet（先知）")]),t._v("；"),e("strong",[t._v("AfterRevive")]),t._v(" 会在 "),e("strong",[t._v("Goner")]),t._v(" 被复活后被执行。")]),t._v(" "),e("p",[t._v("Prophet接口定义如下：")]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prophet  先知")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Prophet "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tGoner\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//AfterRevive 在Goner复活后会被执行")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("AfterRevive")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" AfterReviveError\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"😇angel-天使"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#😇angel-天使"}},[t._v("#")]),t._v(" 😇Angel（天使）")]),t._v(" "),e("p",[t._v("一种特殊的 "),e("strong",[t._v("Goner")]),t._v("，拥有天使左翼"),e("code",[t._v("Start(Cemetery) error")]),t._v(" 和 天使右翼"),e("code",[t._v("Stop(Cemetery) error")]),t._v("，左翼负责生（用于分配资源，启动某项服务），右翼负责死（用于终止某项服务，回收资源）。")]),t._v(" "),e("p",[t._v("Angel接口定义如下：")]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Angel "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tGoner\n\t"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Start")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Cemetery"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Stop")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Cemetery"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"🧛🏻‍♀️vampire-吸血鬼"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#🧛🏻‍♀️vampire-吸血鬼"}},[t._v("#")]),t._v(" 🧛🏻‍♀️Vampire（吸血鬼）")]),t._v(" "),e("p",[t._v("一种特殊的 "),e("strong",[t._v("Goner")]),t._v("，拥有特殊能力——吸血"),e("code",[t._v("Suck(conf string, v reflect.Value) SuckError")]),t._v("。"),e("strong",[t._v("Suck")]),t._v("可以将不是"),e("strong",[t._v("Goner")]),t._v("的值赋予注入给Goner属性。")]),t._v(" "),e("p",[t._v("Vampire接口定义如下：")]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" SuckError "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Vampire "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tGoner\n\t"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Suck")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("conf "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v reflect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" SuckError\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"cemetery-墓园"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cemetery-墓园"}},[t._v("#")]),t._v(" Cemetery（墓园）")]),t._v(" "),e("p",[t._v("Cemetery用于管理Goners，主要提供Bury（埋葬）和 revive（复活）的方法，其接口定义如下：")]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Cemetery "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... 其他方法")]),t._v("\n\tGoner\n\t"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bury")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Goner"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("GonerId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Cemetery  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 埋葬，将逝者埋葬到墓园")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("revive")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复活，对逝者进行复活，让他们升入天堂")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("从代码上可以看到Cemetery本身也是一个Goner，在Gone框架启动时他会被自动埋葬和复活。")]),t._v(" "),e("h3",{attrs:{id:"bury-埋葬"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bury-埋葬"}},[t._v("#")]),t._v(" Bury（埋葬）")]),t._v(" "),e("p",[t._v("Cemetery上的公开方法，通过这个方法，Priest函数可以将Goner埋葬到墓园（就是将组件放到依赖注入系统用于注入或者被注入）。")]),t._v(" "),e("h3",{attrs:{id:"revive-复活"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#revive-复活"}},[t._v("#")]),t._v(" revive（复活）")]),t._v(" "),e("p",[t._v("在gone中，依赖注入的具体工程被称为复活，即对一个Goner上需要注入的属性完整组装，将对应的值赋给对应的属性。revive（复活）被定义一个私有方法，只能被Heaven（天国）调用，因为复活是在天国下完成的。")]),t._v(" "),e("h2",{attrs:{id:"heaven-天国"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#heaven-天国"}},[t._v("#")]),t._v(" Heaven（天国）")]),t._v(" "),e("p",[t._v("Heaven（天国）代表了一个Gone程序，用于管理程序的启动、停止等状态和流程（复活在启动前完成），用于在启动前后以及程序停止前执行一些hook任务。")])])}),[],!1,null,null,null);e.default=n.exports}}]);