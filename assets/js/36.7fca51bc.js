(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{325:function(t,n,a){"use strict";a.r(n);var s=a(10),e=Object(s.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"logging-output"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#logging-output"}},[t._v("#")]),t._v(" Logging Output")]),t._v(" "),n("p",[t._v("In Gone, an internal Goner is provided for logging output - "),n("a",{attrs:{href:"github.com/gone-io/gone/tree/main/goner/logrus"}},[t._v("logrus")]),t._v(", which is implemented by wrapping the "),n("code",[t._v("github.com/sirupsen/logrus")]),t._v(" package as a Goner. It is hoped that other logging output packages will be encapsulated by contributors to provide more logging solutions.")]),t._v(" "),n("h2",{attrs:{id:"burying-related-goners-in-the-cemetery"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#burying-related-goners-in-the-cemetery"}},[t._v("#")]),t._v(" Burying Related Goners in the Cemetery")]),t._v(" "),n("blockquote",[n("p",[t._v("tip: To understand the core concepts and terminology of Gone, please read: "),n("a",{attrs:{href:"https://goner.fun/en/guide/core-concept.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Core Concepts of Gone"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("Here, we use the "),n("strong",[n("code",[t._v("BasePriest")])]),t._v(" from the package "),n("strong",[n("code",[t._v("github.com/gone-io/gone/tree/main/goner")])]),t._v(" to bury related Goners. In the "),n("code",[t._v("BasePriest")]),t._v(", Goners related to configuration and trace are also buried into the Cemetery, as these three packages are commonly used together.")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("MasterPriest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cemetery gone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Cemetery"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" goner"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("BasePriest")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cemetery"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Bury other Goners")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"adding-related-configurations-in-the-configuration-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#adding-related-configurations-in-the-configuration-file"}},[t._v("#")]),t._v(" Adding Related Configurations in the Configuration File")]),t._v(" "),n("blockquote",[n("p",[t._v("tip: "),n("a",{attrs:{href:"https://goner.fun/en/guide/config.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Supporting Configuration Files through Built-in Goners"),n("OutboundLink")],1)])]),t._v(" "),n("p",[n("strong",[t._v("Supported Configuration Items")])]),t._v(" "),n("ul",[n("li",[t._v("log.level: Log level, default is info; supported levels:\n"),n("ul",[n("li",[t._v("panic")]),t._v(" "),n("li",[t._v("fatal")]),t._v(" "),n("li",[t._v("error")]),t._v(" "),n("li",[t._v("warn or warning")]),t._v(" "),n("li",[t._v("info")]),t._v(" "),n("li",[t._v("debug")]),t._v(" "),n("li",[t._v("trace")])])]),t._v(" "),n("li",[t._v("log.report-caller: If true, log will print the file name and line number of the log output position, for example:\n2024-05-11 09:09:57.784|INFO|"),n("strong",[t._v("/Users/jim/go/pkg/mod/github.com/gone-io/gone@v0.1.4/goner/gin/server.go:46")]),t._v("|061ad00f-8c0d-479c-bc4c-393e0cf2cca2|Server Listen At :8080")]),t._v(" "),n("li",[t._v("log.output: Log output location, default is stdout (standard output), supports stderr and a file path\n"),n("blockquote",[n("p",[n("strong",[t._v("Best Practice:")]),t._v(" Deploy the application in containers and directly output logs to standard output, collected by a log collection component such as EFK.")])])])]),t._v(" "),n("h2",{attrs:{id:"logging"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[t._v("#")]),t._v(" Logging")]),t._v(" "),n("p",[t._v("Use the "),n("code",[t._v("Info")]),t._v(" method to log:")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" service "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    gone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Flag\n    log logrus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Logger "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`gone:"gone-logger"`')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Named injection into nested log attributes")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("svc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("service"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Business")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Log")]),t._v("\n    svc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Infof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input content is %s"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" input"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" input"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n")])])]),n("p",[t._v("For logging at other levels, refer to the interface code:")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Logger interface for logging")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Logger "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Tracef")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("format "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Debugf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("format "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Infof")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("format "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("format "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Warnf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("format "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Warningf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("format "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Errorf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("format "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fatalf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("format "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Panicf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("format "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Trace")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Debug")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Info")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Warn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Warning")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fatal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Panic")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Traceln")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Debugln")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Infoln")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Warnln")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Warningln")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Errorln")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fatalln")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Panicln")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"log-format"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#log-format"}},[t._v("#")]),t._v(" Log Format")]),t._v(" "),n("p",[n("code",[t._v("${Log Output Time}|${Log Level}|${Source Code Position of Log Output}|${TraceId}|${Log Content}")])]),t._v(" "),n("p",[t._v("For example:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("2024-05-11 09:09:57.784|INFO|**/Users/jim/go/pkg/mod/github.com/gone-io/gone@v0.1.4/goner/gin/server.go:46**|061ad00f-8c0d-479c-bc4c-393e0cf2cca2|Server Listen At :8080\n")])])]),n("h2",{attrs:{id:"about-traceid"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#about-traceid"}},[t._v("#")]),t._v(" About TraceId")]),t._v(" "),n("p",[t._v("In web applications, we want a unified ID to identify logs generated by the same request. This unified ID is the TraceId. If this ID exists, when troubleshooting, we can search for logs using this ID to obtain all logs related to the request.")])])}),[],!1,null,null,null);n.default=e.exports}}]);